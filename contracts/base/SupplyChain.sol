// SPDX-License-Identifier: MIT
pragma solidity >=0.4.21 <=0.7.0;

import "../access_control/AccessControl.sol";

// Define a contract 'Supplychain'
contract SupplyChain is AccessControl {
    // Define 'theOwner'
    address theOwner;

    // Define a variable called 'upc' for Universal Product Code (UPC)
    uint256 upc;

    // Define a variable called 'sku' for Stock Keeping Unit (SKU)
    uint256 sku;

    // Define a public mapping 'items' that maps the UPC to an Item.
    mapping(uint256 => Item) items;

    // Define a public mapping 'itemsHistory' that maps the UPC to an array of TxHash,
    // that track its journey through the supply chain -- to be sent from DApp.
    mapping(uint256 => string[]) itemsHistory;

    // Define enum 'State' with the following values:
    enum State {
        Planted, // 0
        Harvested, // 1
        MetWoolProcessor, // 2
        ShippedFromFarmer, // 3
        Processed, // 4
        MetFabricDesigner, // 5
        ShippedFromProcessor, // 6
        Sewn, // 7
        Advertised, // 8
        Purchased // 9
    }

    State constant defaultState = State.Planted;

    // Define a struct 'Item' with the following fields:
    struct Item {
        uint256 sku; // Stock Keeping Unit (SKU)
        uint256 upc; // Universal Product Code (UPC), generated by the Farmer, goes on the package, can be verified by the Consumer
        address ownerID; // Metamask-Ethereum address of the current owner as the product moves through 10 stages
        address originFarmerID; // Metamask-Ethereum address of the Farmer
        string originFarmName; // Farmer Name
        string originFarmInformation; // Farmer Information
        string originFarmLatitude; // Farm Latitude
        string originFarmLongitude; // Farm Longitude
        string productNotes; // Product Notes
        uint256 woolPrice; // Wool Price set by farmer
        uint256 fabricPrice; // Fabric Price set by processor
        uint256 clothPrice; // Cloth Price set by designer
        State itemState; // Product State as represented in the enum above
        address processorID; // Metamask-Ethereum address of the Processor
        address designerID; // Metamask-Ethereum address of the Retailer
        address buyerID; // Metamask-Ethereum address of the Consumer
    }

    // Define 10 events with the same 10 state values and accept 'upc' as input argument
    event Planted(uint256 upc);
    event Harvested(uint256 upc);
    event MetWoolProcessor(uint256 upc);
    event ShippedFromFarmer(uint256 upc);
    event Processed(uint256 upc);
    event MetFabricDesigner(uint256 upc);
    event ShippedFromProcessor(uint256 upc);
    event Sewn(uint256 upc);
    event Advertised(uint256 upc);
    event Purchased(uint256 upc);

    // Define a modifier that checks if item exists
    modifier itemExist(uint256 _upc) {
        require(items[_upc].sku != 0, "Item does not exist");
        _;
    }

    // Define a modifer that checks to see if msg.sender == owner of the contract
    modifier onlyTheOwner() {
        require(
            msg.sender == theOwner,
            "Only owner of contract can access this resource"
        );
        _;
    }

    // Define a modifer that verifies the Caller
    modifier verifyCaller(address _address) {
        require(
            msg.sender == _address,
            "You do not have permission to access this resource"
        );
        _;
    }

    // Define a modifier that checks if the paid amount is sufficient to cover the price
    modifier paidEnough(uint256 _price) {
        require(msg.value >= _price, "Insufficient funds");
        _;
    }

    // Define a modifier that checks the price and refunds the remaining balance
    modifier checkValue(uint256 _upc, uint256 _price) {
        _;
        uint256 amountToReturn = msg.value - _price;
        msg.sender.transfer(amountToReturn);
    }

    // Define a modifier that checks if an item.state of a upc is Planted
    modifier planted(uint256 _upc) {
        require(items[_upc].itemState == State.Planted, "Item not planted");
        _;
    }

    // Define a modifier that checks if an item.state of a upc is Harvested
    modifier harvested(uint256 _upc) {
        require(items[_upc].itemState == State.Harvested, "Item not harvested");
        _;
    }

    // Define a modifier that checks if an item.state of a upc is MetWoolProcessor
    modifier metWoolProcessor(uint256 _upc) {
        require(
            items[_upc].itemState == State.MetWoolProcessor,
            "Item not seen by wool processor"
        );
        _;
    }

    // Define a modifier that checks if an item.state of a upc is ShippedFromFarmer
    modifier shippedFromFarmer(uint256 _upc) {
        require(
            items[_upc].itemState == State.ShippedFromFarmer,
            "Item not shipped from farmer"
        );
        _;
    }

    // Define a modifier that checks if an item.state of a upc is Processed
    modifier processed(uint256 _upc) {
        require(items[_upc].itemState == State.Processed, "Item not processed");
        _;
    }

    // Define a modifier that checks if an item.state of a upc is MetFabricDesigner
    modifier metFabricDesigner(uint256 _upc) {
        require(
            items[_upc].itemState == State.MetFabricDesigner,
            "Item not seen by fabric designer"
        );
        _;
    }

    // Define a modifier that checks if an item.state of a upc is ShippedFromProcessor
    modifier shippedFromProcessor(uint256 _upc) {
        require(
            items[_upc].itemState == State.ShippedFromProcessor,
            "Item not shipped from processor"
        );
        _;
    }

    // Define a modifier that checks if an item.state of a upc is Sewn
    modifier sewn(uint256 _upc) {
        require(items[_upc].itemState == State.Sewn, "Item not sewn");
        _;
    }

    // Define a modifier that checks if an item.state of a upc is Advertised
    modifier advertised(uint256 _upc) {
        require(
            items[_upc].itemState == State.Advertised,
            "Item not advertised for sale"
        );
        _;
    }

    // Define a modifier that checks if an item.state of a upc is Purchased
    modifier purchased(uint256 _upc) {
        require(items[_upc].itemState == State.Purchased, "Item not purchased");
        _;
    }

    // In the constructor set 'owner' to the address that instantiated the contract
    // and set 'sku' to 1
    // and set 'upc' to 1
    constructor() public payable {
        theOwner = msg.sender;
        sku = 1;
        upc = 1;
    }

    // Function that allows you to convert an address into a payable address
    function _make_payable(address x) internal pure returns (address payable) {
        return address(uint160(x));
    }

    // Define a function 'kill' if required
    function kill() public {
        if (msg.sender == theOwner) {
            selfdestruct(_make_payable(theOwner));
        }
    }

    // Define a function 'plantItem' that allows a farmer to mark an item 'Planted'
    function plantItem(
        uint256 _upc,
        address _originFarmerID,
        string memory _originFarmName,
        string memory _originFarmInformation,
        string memory _originFarmLatitude,
        string memory _originFarmLongitude,
        string memory _productNotes
    ) public onlyFarmer {
        // Add the new item
        Item memory wool = Item(
            sku,
            _upc,
            _originFarmerID,
            _originFarmerID,
            _originFarmName,
            _originFarmInformation,
            _originFarmLatitude,
            _originFarmLongitude,
            _productNotes,
            0,
            0,
            0,
            defaultState,
            address(0),
            address(0),
            address(0)
        );

        items[_upc] = wool;

        // Increment sku
        sku = sku + 1;
        // Emit the appropriate event
        emit Planted(_upc);
    }

    // Define a function 'harvestItem' that allows a farmer to mark an item 'Harvested'
    function harvestItem(uint256 _upc, uint256 _price)
        public
        itemExist(_upc)
        planted(_upc)
        onlyFarmer
        verifyCaller(items[_upc].ownerID)
    {
        // Update item state to Harvested
        items[_upc].itemState = State.Harvested;
        items[_upc].woolPrice = _price;

        // Emit the appropriate event
        emit Harvested(_upc);
    }

    // Define a function 'meetWoolProcessor' that allows a farmer to mark an item 'MetWoolProcessor'
    function meetWoolProcessor(uint256 _upc)
        public
        itemExist(_upc)
        harvested(_upc)
        onlyFarmer
        verifyCaller(items[_upc].ownerID)
    {
        // Update item state
        items[_upc].itemState = State.MetWoolProcessor;

        // Emit the appropriate event
        emit MetWoolProcessor(_upc);
    }

    // Define a function 'shipFromFarmer' that marks an item as 'ShippedFromFarmer'
    function shipFromFarmer(uint256 _upc)
        public
        payable
        itemExist(_upc)
        metWoolProcessor(_upc)
        onlyWoolProcessor
        paidEnough(items[_upc].woolPrice)
        checkValue(_upc, items[_upc].woolPrice)
    {
        // Update item state
        items[_upc].itemState = State.ShippedFromFarmer;

        // set processorId and ownerID
        items[_upc].processorID = msg.sender;
        items[_upc].ownerID = msg.sender;

        // Transfer money to farmer
        address payable farmer = _make_payable(items[_upc].originFarmerID);
        farmer.transfer(items[_upc].woolPrice);

        // Emit the appropriate event
        emit ShippedFromFarmer(_upc);
    }

    // Define a function 'processtItem' that marks an item as 'Processed'
    function processItem(uint256 _upc, uint256 _price)
        public
        // Call modifier to check if upc has passed previous supply chain stage
        itemExist(_upc)
        shippedFromFarmer(_upc)
        onlyWoolProcessor
        // Call modifier to verify caller of this function
        verifyCaller(items[_upc].ownerID)
    {
        // Update the appropriate fields
        items[_upc].itemState = State.Processed;
        items[_upc].fabricPrice = _price;

        // Emit the appropriate event
        emit Processed(_upc);
    }

    // Define a function 'meetFabricDesigner' that marks an item as 'MetFabricDesigner'
    function meetFabricDesigner(uint256 _upc)
        public
        itemExist(_upc)
        processed(_upc)
        onlyWoolProcessor
        verifyCaller(items[_upc].ownerID)
    {
        // Update item state
        items[_upc].itemState = State.MetFabricDesigner;

        // Emit the appropriate event
        emit MetFabricDesigner(_upc);
    }

    // Define a function 'shipFromProcessor' that marks an item as 'ShippedFromProcessor'
    function shipFromProcessor(uint256 _upc)
        public
        payable
        itemExist(_upc)
        metFabricDesigner(_upc)
        onlyFabricDesigner
        paidEnough(items[_upc].fabricPrice)
        checkValue(_upc, items[_upc].fabricPrice)
    {
        // Update item state
        items[_upc].itemState = State.ShippedFromProcessor;

        // set designerID and ownerID
        items[_upc].designerID = msg.sender;
        items[_upc].ownerID = msg.sender;

        // Transfer money to processor
        address payable processor = _make_payable(items[_upc].processorID);
        processor.transfer(items[_upc].fabricPrice);

        // Emit the appropriate event
        emit ShippedFromProcessor(_upc);
    }

    // Define a function 'sew' that marks an item as 'Sewn'
    function sew(uint256 _upc, uint256 _price)
        public
        itemExist(_upc)
        shippedFromProcessor(_upc)
        onlyFabricDesigner
        verifyCaller(items[_upc].ownerID)
    {
        // Update item state
        items[_upc].itemState = State.Sewn;
        items[_upc].clothPrice = _price;

        // Emit the appropriate event
        emit Sewn(_upc);
    }

    // Define a function 'advertise' that marks an item as 'Advertised'
    function advertise(uint256 _upc)
        public
        itemExist(_upc)
        sewn(_upc)
        onlyFabricDesigner
        verifyCaller(items[_upc].ownerID)
    {
        // Update item state
        items[_upc].itemState = State.Advertised;

        // Emit the appropriate event
        emit Advertised(_upc);
    }

    // Define a function 'purchase' that marks an item as 'Purchased'
    function purchase(uint256 _upc)
        public
        payable
        itemExist(_upc)
        advertised(_upc)
        onlyBuyer
        paidEnough(items[_upc].clothPrice)
        checkValue(_upc, items[_upc].clothPrice)
    {
        // Update item state
        items[_upc].itemState = State.Purchased;

        // set buyerID and ownerID
        items[_upc].buyerID = msg.sender;
        items[_upc].ownerID = msg.sender;

        // Transfer money to designer
        address payable designer = _make_payable(items[_upc].designerID);
        designer.transfer(items[_upc].clothPrice);

        // Emit the appropriate event
        emit Purchased(_upc);
    }

    // Define a function 'fetchItem' that fetches the item origin data
    function fetchItemOrigin(uint256 _upc)
        public
        view
        itemExist(_upc)
        purchased(_upc)
        onlyBuyer
        returns (
            address originFarmerID,
            string memory originFarmName,
            string memory originFarmInformation,
            string memory originFarmLatitude,
            string memory originFarmLongitude
        )
    {
        return (
            items[_upc].originFarmerID,
            items[_upc].originFarmName,
            items[_upc].originFarmInformation,
            items[_upc].originFarmLatitude,
            items[_upc].originFarmLongitude
        );
    }

    // Define a function 'fetchItemDetails' that fetches the item core details
    function fetchItemDetails(uint256 _upc)
        public
        view
        itemExist(_upc)
        purchased(_upc)
        onlyBuyer
        returns (
            uint256 itemSku,
            uint256 itemUpc,
            address ownerID,
            string memory productNotes,
            State itemState
        )
    {
        return (
            items[_upc].sku,
            items[_upc].upc,
            items[_upc].ownerID,
            items[_upc].productNotes,
            items[_upc].itemState
        );
    }

    // Define a function 'fetchItemPrices' that fetches the item price history
    function fetchItemPrices(uint256 _upc)
        public
        view
        itemExist(_upc)
        purchased(_upc)
        onlyBuyer
        returns (
            uint256 woolPrice,
            uint256 fabricPrice,
            uint256 clothPrice
        )
    {
        return (
            items[_upc].woolPrice,
            items[_upc].fabricPrice,
            items[_upc].clothPrice
        );
    }

    // Define a function 'fetchItemActors' that fetches everyone who has performed action on the item
    function fetchItemActors(uint256 _upc)
        public
        view
        itemExist(_upc)
        purchased(_upc)
        onlyBuyer
        returns (
            address originFarmerID,
            address processorID,
            address designerID,
            address buyerID
        )
    {
        return (
            items[_upc].originFarmerID,
            items[_upc].processorID,
            items[_upc].designerID,
            items[_upc].buyerID
        );
    }

    // Define a function 'fetchItemState' that allows anyone to fetch item's state
    function fetchItemState(uint256 _upc)
        public
        view
        itemExist(_upc)
        returns (State itemState)
    {
        return (items[_upc].itemState);
    }
}
